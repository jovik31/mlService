// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: file_service.proto

package go_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileTranferClient is the client API for FileTranfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTranferClient interface {
	// Uploads dataset using client streaming grpc, responds with the file name
	// and the result of the storing operation
	UploadStream(ctx context.Context, opts ...grpc.CallOption) (FileTranfer_UploadStreamClient, error)
	// Downloads datasets in CSV format from the server using server side
	// streaming grpc
	DownloadStream(ctx context.Context, in *RequestFile, opts ...grpc.CallOption) (FileTranfer_DownloadStreamClient, error)
	// Upload file using unary grpc for files smaller than 4mb.
	Upload(ctx context.Context, in *File, opts ...grpc.CallOption) (*ResponseFile, error)
	// Upload file using unary grpc for files smaller than 4mb
	Download(ctx context.Context, in *RequestFile, opts ...grpc.CallOption) (*File, error)
}

type fileTranferClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTranferClient(cc grpc.ClientConnInterface) FileTranferClient {
	return &fileTranferClient{cc}
}

func (c *fileTranferClient) UploadStream(ctx context.Context, opts ...grpc.CallOption) (FileTranfer_UploadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTranfer_ServiceDesc.Streams[0], "/FileTranfer/UploadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTranferUploadStreamClient{stream}
	return x, nil
}

type FileTranfer_UploadStreamClient interface {
	Send(*FileStream) error
	CloseAndRecv() (*ResponseFile, error)
	grpc.ClientStream
}

type fileTranferUploadStreamClient struct {
	grpc.ClientStream
}

func (x *fileTranferUploadStreamClient) Send(m *FileStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTranferUploadStreamClient) CloseAndRecv() (*ResponseFile, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTranferClient) DownloadStream(ctx context.Context, in *RequestFile, opts ...grpc.CallOption) (FileTranfer_DownloadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTranfer_ServiceDesc.Streams[1], "/FileTranfer/DownloadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTranferDownloadStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTranfer_DownloadStreamClient interface {
	Recv() (*FileStream, error)
	grpc.ClientStream
}

type fileTranferDownloadStreamClient struct {
	grpc.ClientStream
}

func (x *fileTranferDownloadStreamClient) Recv() (*FileStream, error) {
	m := new(FileStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTranferClient) Upload(ctx context.Context, in *File, opts ...grpc.CallOption) (*ResponseFile, error) {
	out := new(ResponseFile)
	err := c.cc.Invoke(ctx, "/FileTranfer/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTranferClient) Download(ctx context.Context, in *RequestFile, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/FileTranfer/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTranferServer is the server API for FileTranfer service.
// All implementations must embed UnimplementedFileTranferServer
// for forward compatibility
type FileTranferServer interface {
	// Uploads dataset using client streaming grpc, responds with the file name
	// and the result of the storing operation
	UploadStream(FileTranfer_UploadStreamServer) error
	// Downloads datasets in CSV format from the server using server side
	// streaming grpc
	DownloadStream(*RequestFile, FileTranfer_DownloadStreamServer) error
	// Upload file using unary grpc for files smaller than 4mb.
	Upload(context.Context, *File) (*ResponseFile, error)
	// Upload file using unary grpc for files smaller than 4mb
	Download(context.Context, *RequestFile) (*File, error)
	mustEmbedUnimplementedFileTranferServer()
}

// UnimplementedFileTranferServer must be embedded to have forward compatible implementations.
type UnimplementedFileTranferServer struct {
}

func (UnimplementedFileTranferServer) UploadStream(FileTranfer_UploadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadStream not implemented")
}
func (UnimplementedFileTranferServer) DownloadStream(*RequestFile, FileTranfer_DownloadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadStream not implemented")
}
func (UnimplementedFileTranferServer) Upload(context.Context, *File) (*ResponseFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFileTranferServer) Download(context.Context, *RequestFile) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileTranferServer) mustEmbedUnimplementedFileTranferServer() {}

// UnsafeFileTranferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTranferServer will
// result in compilation errors.
type UnsafeFileTranferServer interface {
	mustEmbedUnimplementedFileTranferServer()
}

func RegisterFileTranferServer(s grpc.ServiceRegistrar, srv FileTranferServer) {
	s.RegisterService(&FileTranfer_ServiceDesc, srv)
}

func _FileTranfer_UploadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTranferServer).UploadStream(&fileTranferUploadStreamServer{stream})
}

type FileTranfer_UploadStreamServer interface {
	SendAndClose(*ResponseFile) error
	Recv() (*FileStream, error)
	grpc.ServerStream
}

type fileTranferUploadStreamServer struct {
	grpc.ServerStream
}

func (x *fileTranferUploadStreamServer) SendAndClose(m *ResponseFile) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTranferUploadStreamServer) Recv() (*FileStream, error) {
	m := new(FileStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileTranfer_DownloadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestFile)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTranferServer).DownloadStream(m, &fileTranferDownloadStreamServer{stream})
}

type FileTranfer_DownloadStreamServer interface {
	Send(*FileStream) error
	grpc.ServerStream
}

type fileTranferDownloadStreamServer struct {
	grpc.ServerStream
}

func (x *fileTranferDownloadStreamServer) Send(m *FileStream) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTranfer_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTranferServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileTranfer/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTranferServer).Upload(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTranfer_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTranferServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileTranfer/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTranferServer).Download(ctx, req.(*RequestFile))
	}
	return interceptor(ctx, in, info, handler)
}

// FileTranfer_ServiceDesc is the grpc.ServiceDesc for FileTranfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTranfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileTranfer",
	HandlerType: (*FileTranferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _FileTranfer_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _FileTranfer_Download_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadStream",
			Handler:       _FileTranfer_UploadStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadStream",
			Handler:       _FileTranfer_DownloadStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_service.proto",
}
