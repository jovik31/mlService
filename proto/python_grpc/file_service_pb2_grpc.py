# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto.python_grpc import file_service_pb2 as file__service__pb2


class FileTranferStub(object):
    """Services used to transfer datasets for storage and use in machine learning
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Upload = channel.stream_unary(
            '/FileTranfer/Upload',
            request_serializer=file__service__pb2.File.SerializeToString,
            response_deserializer=file__service__pb2.Response.FromString,
        )
        self.Download = channel.unary_stream(
            '/FileTranfer/Download',
            request_serializer=file__service__pb2.Request.SerializeToString,
            response_deserializer=file__service__pb2.File.FromString,
        )


class FileTranferServicer(object):
    """Services used to transfer datasets for storage and use in machine learning
    """

    def Upload(self, request_iterator, context):
        """Upload file using unary grpc for files smaller than 4mb.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Download(self, request, context):
        """Upload file using unary grpc for files smaller than 4mb
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileTranferServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Upload': grpc.stream_unary_rpc_method_handler(
            servicer.Upload,
            request_deserializer=file__service__pb2.File.FromString,
            response_serializer=file__service__pb2.Response.SerializeToString,
        ),
        'Download': grpc.unary_stream_rpc_method_handler(
            servicer.Download,
            request_deserializer=file__service__pb2.Request.FromString,
            response_serializer=file__service__pb2.File.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'FileTranfer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class FileTranfer(object):
    """Services used to transfer datasets for storage and use in machine learning
    """

    @staticmethod
    def Upload(request_iterator,
               target,
               options=(),
               channel_credentials=None,
               call_credentials=None,
               insecure=False,
               compression=None,
               wait_for_ready=None,
               timeout=None,
               metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/FileTranfer/Upload',
                                              file__service__pb2.File.SerializeToString,
                                              file__service__pb2.Response.FromString,
                                              options, channel_credentials,
                                              insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Download(request,
                 target,
                 options=(),
                 channel_credentials=None,
                 call_credentials=None,
                 insecure=False,
                 compression=None,
                 wait_for_ready=None,
                 timeout=None,
                 metadata=None):
        return grpc.experimental.unary_stream(request, target, '/FileTranfer/Download',
                                              file__service__pb2.Request.SerializeToString,
                                              file__service__pb2.File.FromString,
                                              options, channel_credentials,
                                              insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
