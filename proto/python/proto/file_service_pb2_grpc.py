# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import file_service_pb2 as proto_dot_file__service__pb2


class FileTranferStub(object):
    """Services used to transfer datasets for storage and use in machine learning
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadStream = channel.stream_unary(
                '/FileTranfer/UploadStream',
                request_serializer=proto_dot_file__service__pb2.FileStream.SerializeToString,
                response_deserializer=proto_dot_file__service__pb2.ResponseFile.FromString,
                )
        self.DownloadStream = channel.unary_stream(
                '/FileTranfer/DownloadStream',
                request_serializer=proto_dot_file__service__pb2.RequestFile.SerializeToString,
                response_deserializer=proto_dot_file__service__pb2.FileStream.FromString,
                )
        self.Upload = channel.unary_unary(
                '/FileTranfer/Upload',
                request_serializer=proto_dot_file__service__pb2.File.SerializeToString,
                response_deserializer=proto_dot_file__service__pb2.ResponseFile.FromString,
                )
        self.Download = channel.unary_unary(
                '/FileTranfer/Download',
                request_serializer=proto_dot_file__service__pb2.RequestFile.SerializeToString,
                response_deserializer=proto_dot_file__service__pb2.File.FromString,
                )


class FileTranferServicer(object):
    """Services used to transfer datasets for storage and use in machine learning
    """

    def UploadStream(self, request_iterator, context):
        """Uploads dataset using client streaming grpc, responds with the file name
        and the result of the storing operation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadStream(self, request, context):
        """Downloads datasets in CSV format from the server using server side
        streaming grpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upload(self, request, context):
        """Upload file using unary grpc for files smaller than 4mb.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Download(self, request, context):
        """Upload file using unary grpc for files smaller than 4mb
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileTranferServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadStream': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadStream,
                    request_deserializer=proto_dot_file__service__pb2.FileStream.FromString,
                    response_serializer=proto_dot_file__service__pb2.ResponseFile.SerializeToString,
            ),
            'DownloadStream': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadStream,
                    request_deserializer=proto_dot_file__service__pb2.RequestFile.FromString,
                    response_serializer=proto_dot_file__service__pb2.FileStream.SerializeToString,
            ),
            'Upload': grpc.unary_unary_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=proto_dot_file__service__pb2.File.FromString,
                    response_serializer=proto_dot_file__service__pb2.ResponseFile.SerializeToString,
            ),
            'Download': grpc.unary_unary_rpc_method_handler(
                    servicer.Download,
                    request_deserializer=proto_dot_file__service__pb2.RequestFile.FromString,
                    response_serializer=proto_dot_file__service__pb2.File.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FileTranfer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileTranfer(object):
    """Services used to transfer datasets for storage and use in machine learning
    """

    @staticmethod
    def UploadStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/FileTranfer/UploadStream',
            proto_dot_file__service__pb2.FileStream.SerializeToString,
            proto_dot_file__service__pb2.ResponseFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/FileTranfer/DownloadStream',
            proto_dot_file__service__pb2.RequestFile.SerializeToString,
            proto_dot_file__service__pb2.FileStream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Upload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileTranfer/Upload',
            proto_dot_file__service__pb2.File.SerializeToString,
            proto_dot_file__service__pb2.ResponseFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Download(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileTranfer/Download',
            proto_dot_file__service__pb2.RequestFile.SerializeToString,
            proto_dot_file__service__pb2.File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
